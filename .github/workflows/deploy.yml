name: Deploy Zero-Trust Explainer

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  ARTIFACT_REGISTRY_REPO: zte-repo

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build and push backend image
        run: |
          cd backend
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/backend:${{ github.sha }} .
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/backend:${{ github.sha }}
          docker tag ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/backend:${{ github.sha }} \
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/backend:latest
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/backend:latest

      - name: Build and push frontend image
        run: |
          cd frontend
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/frontend:${{ github.sha }} .
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/frontend:${{ github.sha }}
          docker tag ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/frontend:${{ github.sha }} \
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/frontend:latest
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/frontend:latest

      - name: Enable Prerequisite APIs
        run: |
          # Enable Cloud Resource Manager API (required for Terraform to manage other APIs)
          gcloud services enable cloudresourcemanager.googleapis.com --project=${{ env.GCP_PROJECT_ID }} || true
          # Enable IAM API (required for Terraform to manage service accounts)
          gcloud services enable iam.googleapis.com --project=${{ env.GCP_PROJECT_ID }} || true
          # Wait a few seconds for APIs to propagate
          sleep 5

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        id: terraform-plan
        run: |
          cd terraform
          
          # Build terraform plan command with required variables
          TF_PLAN_CMD="terraform plan \
            -var=\"project_id=${{ env.GCP_PROJECT_ID }}\" \
            -var=\"region=${{ env.GCP_REGION }}\" \
            -var=\"backend_image=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/backend:${{ github.sha }}\" \
            -var=\"frontend_image=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/frontend:${{ github.sha }}\""
          
          # Add gemini_api_key if secret exists (for initial Secret Manager setup)
          if [ -n "${{ secrets.GEMINI_API_KEY }}" ]; then
            TF_PLAN_CMD="$TF_PLAN_CMD -var=\"gemini_api_key=${{ secrets.GEMINI_API_KEY }}\""
          fi
          
          # Complete command and save plan
          TF_PLAN_CMD="$TF_PLAN_CMD -out=tfplan"
          
          # Execute terraform plan
          eval $TF_PLAN_CMD

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Get deployment URLs
        id: get-urls
        run: |
          cd terraform
          echo "backend_url=$(terraform output -raw backend_url)" >> $GITHUB_OUTPUT
          echo "frontend_url=$(terraform output -raw frontend_url)" >> $GITHUB_OUTPUT

      - name: Display deployment info
        run: |
          echo "ðŸš€ Deployment Complete!"
          echo "Backend API: ${{ steps.get-urls.outputs.backend_url }}"
          echo "Frontend: ${{ steps.get-urls.outputs.frontend_url }}"
